# === http 级：先声明 CORS 映射与日志 ===
map $http_access_control_request_headers $cors_allow_headers {
  default "Authorization,Content-Type,Prefer,Range,apikey,X-Client-Info,Accept-Profile,Content-Profile,Accept,X-Requested-With";
  "~.+"   "Authorization,Content-Type,Prefer,Range,apikey,X-Client-Info,Accept-Profile,Content-Profile,Accept,X-Requested-With, $http_access_control_request_headers";
}

log_format cors '$remote_addr "$request" $status '
                'origin="$http_origin" acrh="$http_access_control_request_headers" '
                'acao="$sent_http_access_control_allow_origin" '
                'acah="$sent_http_access_control_allow_headers" '
                'rt=$request_time urt=$upstream_response_time';

# 提升错误日志级别，便于诊断TLS握手问题
error_log /var/log/nginx/error.log info;

# 80：添加健康检查，其他跳转HTTPS
server {
  listen 80;
  server_name trade-calculator.top api.trade-calculator.top;
  
  # 健康检查端点（绕过HTTPS，测试网络连通性）
  location = /health {
    return 200 "ok from $host\n";
    add_header Content-Type text/plain;
  }
  
  # 其他请求跳转HTTPS
  return 308 https://$host$request_uri;
}

# 主站 HTTPS（使用最兼容TLS配置）
server {
  listen 443 ssl;
  server_name trade-calculator.top;

  ssl_certificate     /etc/nginx/ssl/main/trade-calculator.top.pem;
  ssl_certificate_key /etc/nginx/ssl/main/trade-calculator.top.key;

  # 临时使用最兼容的TLS配置
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305";
  ssl_prefer_server_ciphers off;
  ssl_ecdh_curve X25519:P-256:secp384r1;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 1d;
  ssl_session_tickets off;
  add_header Strict-Transport-Security "max-age=31536000" always;

  root /usr/share/nginx/html;
  index index.html;
  try_files $uri $uri/ /index.html;
}

# API HTTPS（使用相同兼容配置）
server {
  listen 443 ssl;
  server_name api.trade-calculator.top;

  ssl_certificate     /etc/nginx/ssl/api/api.trade-calculator.top.pem;
  ssl_certificate_key /etc/nginx/ssl/api/api.trade-calculator.top.key;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305";
  ssl_prefer_server_ciphers off;
  ssl_ecdh_curve X25519:P-256:secp384r1;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 1d;
  ssl_session_tickets off;

  access_log /var/log/nginx/api_cors.log cors;

  location /rest/v1/ {
    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Allow-Credentials;
    proxy_hide_header Access-Control-Expose-Headers;
    proxy_hide_header Access-Control-Allow-Methods;
    proxy_hide_header Access-Control-Allow-Headers;

    add_header Access-Control-Allow-Origin "https://trade-calculator.top" always;
    add_header Access-Control-Allow-Credentials "true" always;
    add_header Access-Control-Expose-Headers "Content-Range,Range,Content-Profile" always;
    add_header Access-Control-Allow-Methods "GET,POST,PATCH,PUT,DELETE,OPTIONS" always;
    add_header Access-Control-Allow-Headers $cors_allow_headers always;
    add_header Vary "Origin, Access-Control-Request-Headers" always;
    add_header Access-Control-Max-Age "86400" always;

    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin "https://trade-calculator.top" always;
      add_header Access-Control-Allow-Credentials "true" always;
      add_header Access-Control-Allow-Methods "GET,POST,PATCH,PUT,DELETE,OPTIONS" always;
      add_header Access-Control-Allow-Headers $cors_allow_headers always;
      add_header Vary "Origin, Access-Control-Request-Headers" always;
      add_header Access-Control-Max-Age "86400" always;
      add_header Content-Length 0;
      add_header Content-Type text/plain;
      return 204;
    }

    proxy_http_version 1.1;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Authorization "";
    proxy_pass http://postgrest:3000/;
  }
}